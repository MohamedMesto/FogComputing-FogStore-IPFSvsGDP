/* ***********************************************************
 * This file was automatically generated on 2019-01-29.      *
 *                                                           *
 * JavaScript Bindings Version 2.1.22                        *
 *                                                           *
 * If you have a bugfix for this file and want to commit it, *
 * please fix the bug in the generator. You can find a link  *
 * to the generators git repository on tinkerforge.com       *
 *************************************************************/

var Device = require('./Device');
var IPConnection = require('./IPConnection');

BrickletCAN.DEVICE_IDENTIFIER = 270;
BrickletCAN.DEVICE_DISPLAY_NAME = 'CAN Bricklet';
BrickletCAN.CALLBACK_FRAME_READ = 11;
BrickletCAN.FUNCTION_WRITE_FRAME = 1;
BrickletCAN.FUNCTION_READ_FRAME = 2;
BrickletCAN.FUNCTION_ENABLE_FRAME_READ_CALLBACK = 3;
BrickletCAN.FUNCTION_DISABLE_FRAME_READ_CALLBACK = 4;
BrickletCAN.FUNCTION_IS_FRAME_READ_CALLBACK_ENABLED = 5;
BrickletCAN.FUNCTION_SET_CONFIGURATION = 6;
BrickletCAN.FUNCTION_GET_CONFIGURATION = 7;
BrickletCAN.FUNCTION_SET_READ_FILTER = 8;
BrickletCAN.FUNCTION_GET_READ_FILTER = 9;
BrickletCAN.FUNCTION_GET_ERROR_LOG = 10;
BrickletCAN.FUNCTION_GET_IDENTITY = 255;
BrickletCAN.FRAME_TYPE_STANDARD_DATA = 0;
BrickletCAN.FRAME_TYPE_STANDARD_REMOTE = 1;
BrickletCAN.FRAME_TYPE_EXTENDED_DATA = 2;
BrickletCAN.FRAME_TYPE_EXTENDED_REMOTE = 3;
BrickletCAN.BAUD_RATE_10KBPS = 0;
BrickletCAN.BAUD_RATE_20KBPS = 1;
BrickletCAN.BAUD_RATE_50KBPS = 2;
BrickletCAN.BAUD_RATE_125KBPS = 3;
BrickletCAN.BAUD_RATE_250KBPS = 4;
BrickletCAN.BAUD_RATE_500KBPS = 5;
BrickletCAN.BAUD_RATE_800KBPS = 6;
BrickletCAN.BAUD_RATE_1000KBPS = 7;
BrickletCAN.TRANSCEIVER_MODE_NORMAL = 0;
BrickletCAN.TRANSCEIVER_MODE_LOOPBACK = 1;
BrickletCAN.TRANSCEIVER_MODE_READ_ONLY = 2;
BrickletCAN.FILTER_MODE_DISABLED = 0;
BrickletCAN.FILTER_MODE_ACCEPT_ALL = 1;
BrickletCAN.FILTER_MODE_MATCH_STANDARD = 2;
BrickletCAN.FILTER_MODE_MATCH_STANDARD_AND_DATA = 3;
BrickletCAN.FILTER_MODE_MATCH_EXTENDED = 4;

function BrickletCAN(uid, ipcon) {
	//Communicates with CAN bus devices

	/*
	Creates an object with the unique device ID *uid* and adds it to
	the IP Connection *ipcon*.
	*/
	Device.call(this, this, uid, ipcon);
	BrickletCAN.prototype = Object.create(Device);
	this.APIVersion = [2, 0, 0];
	this.responseExpected[BrickletCAN.FUNCTION_WRITE_FRAME] = Device.RESPONSE_EXPECTED_ALWAYS_TRUE;
	this.responseExpected[BrickletCAN.FUNCTION_READ_FRAME] = Device.RESPONSE_EXPECTED_ALWAYS_TRUE;
	this.responseExpected[BrickletCAN.FUNCTION_ENABLE_FRAME_READ_CALLBACK] = Device.RESPONSE_EXPECTED_TRUE;
	this.responseExpected[BrickletCAN.FUNCTION_DISABLE_FRAME_READ_CALLBACK] = Device.RESPONSE_EXPECTED_TRUE;
	this.responseExpected[BrickletCAN.FUNCTION_IS_FRAME_READ_CALLBACK_ENABLED] = Device.RESPONSE_EXPECTED_ALWAYS_TRUE;
	this.responseExpected[BrickletCAN.FUNCTION_SET_CONFIGURATION] = Device.RESPONSE_EXPECTED_FALSE;
	this.responseExpected[BrickletCAN.FUNCTION_GET_CONFIGURATION] = Device.RESPONSE_EXPECTED_ALWAYS_TRUE;
	this.responseExpected[BrickletCAN.FUNCTION_SET_READ_FILTER] = Device.RESPONSE_EXPECTED_FALSE;
	this.responseExpected[BrickletCAN.FUNCTION_GET_READ_FILTER] = Device.RESPONSE_EXPECTED_ALWAYS_TRUE;
	this.responseExpected[BrickletCAN.FUNCTION_GET_ERROR_LOG] = Device.RESPONSE_EXPECTED_ALWAYS_TRUE;
	this.responseExpected[BrickletCAN.FUNCTION_GET_IDENTITY] = Device.RESPONSE_EXPECTED_ALWAYS_TRUE;
	this.callbackFormats[BrickletCAN.CALLBACK_FRAME_READ] = 'B I B8 B';



	this.writeFrame = function(frameType, identifier, data, length, returnCallback, errorCallback) {
		/*
		Writes a data or remote frame to the write buffer to be transmitted over the
		CAN transceiver.
		
		The Bricklet supports the standard 11-bit (CAN 2.0A) and the additional extended
		18-bit (CAN 2.0B) identifiers. For standard frames the Bricklet uses bit 0 to 10
		from the ``identifier`` parameter as standard 11-bit identifier. For extended
		frames the Bricklet additionally uses bit 11 to 28 from the ``identifier``
		parameter as extended 18-bit identifier.
		
		For remote frames the ``data`` parameter is ignored.
		
		Returns *true* if the frame was successfully added to the write buffer. Returns
		*false* if the frame could not be added because write buffer is already full.
		
		The write buffer can overflow if frames are written to it at a higher rate
		than the Bricklet can transmitted them over the CAN transceiver. This may
		happen if the CAN transceiver is configured as read-only or is using a low baud
		rate (see :func:`Set Configuration`). It can also happen if the CAN bus is
		congested and the frame cannot be transmitted because it constantly loses
		arbitration or because the CAN transceiver is currently disabled due to a high
		write error level (see :func:`Get Error Log`).
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_WRITE_FRAME, [frameType, identifier, data, length], 'B I B8 B', '?', returnCallback, errorCallback, false);
	};
	this.readFrame = function(returnCallback, errorCallback) {
		/*
		Tries to read the next data or remote frame from the read buffer and return it.
		If a frame was successfully read, then the ``success`` return value is set to
		*true* and the other return values contain the frame. If the read buffer is
		empty and no frame could be read, then the ``success`` return value is set to
		*false* and the other return values contain invalid data.
		
		The ``identifier`` return value follows the identifier format described for
		:func:`Write Frame`.
		
		For remote frames the ``data`` return value always contains invalid data.
		
		A configurable read filter can be used to define which frames should be
		received by the CAN transceiver and put into the read buffer (see
		:func:`Set Read Filter`).
		
		Instead of polling with this function, you can also use callbacks. See the
		:func:`Enable Frame Read Callback` function and the :cb:`Frame Read` callback.
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_READ_FRAME, [], '', '? B I B8 B', returnCallback, errorCallback, false);
	};
	this.enableFrameReadCallback = function(returnCallback, errorCallback) {
		/*
		Enables the :cb:`Frame Read` callback.
		
		By default the callback is disabled.
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_ENABLE_FRAME_READ_CALLBACK, [], '', '', returnCallback, errorCallback, false);
	};
	this.disableFrameReadCallback = function(returnCallback, errorCallback) {
		/*
		Disables the :cb:`Frame Read` callback.
		
		By default the callback is disabled.
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_DISABLE_FRAME_READ_CALLBACK, [], '', '', returnCallback, errorCallback, false);
	};
	this.isFrameReadCallbackEnabled = function(returnCallback, errorCallback) {
		/*
		Returns *true* if the :cb:`Frame Read` callback is enabled, *false* otherwise.
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_IS_FRAME_READ_CALLBACK_ENABLED, [], '', '?', returnCallback, errorCallback, false);
	};
	this.setConfiguration = function(baudRate, transceiverMode, writeTimeout, returnCallback, errorCallback) {
		/*
		Sets the configuration for the CAN bus communication.
		
		The baud rate can be configured in steps between 10 and 1000 kbit/s.
		
		The CAN transceiver has three different modes:
		
		* Normal: Reads from and writes to the CAN bus and performs active bus
		  error detection and acknowledgement.
		* Loopback: All reads and writes are performed internally. The transceiver
		  is disconnected from the actual CAN bus.
		* Read-Only: Only reads from the CAN bus, but does neither active bus error
		  detection nor acknowledgement. Only the receiving part of the transceiver
		  is connected to the CAN bus.
		
		The write timeout has three different modes that define how a failed frame
		transmission should be handled:
		
		* One-Shot (< 0): Only one transmission attempt will be made. If the
		  transmission fails then the frame is discarded.
		* Infinite (= 0): Infinite transmission attempts will be made. The frame will
		  never be discarded.
		* Milliseconds (> 0): A limited number of transmission attempts will be made.
		  If the frame could not be transmitted successfully after the configured
		  number of milliseconds then the frame is discarded.
		
		The default is: 125 kbit/s, normal transceiver mode and infinite write timeout.
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_SET_CONFIGURATION, [baudRate, transceiverMode, writeTimeout], 'B B i', '', returnCallback, errorCallback, false);
	};
	this.getConfiguration = function(returnCallback, errorCallback) {
		/*
		Returns the configuration as set by :func:`Set Configuration`.
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_GET_CONFIGURATION, [], '', 'B B i', returnCallback, errorCallback, false);
	};
	this.setReadFilter = function(mode, mask, filter1, filter2, returnCallback, errorCallback) {
		/*
		Set the read filter configuration. This can be used to define which frames
		should be received by the CAN transceiver and put into the read buffer.
		
		The read filter has five different modes that define if and how the mask and
		the two filters are applied:
		
		* Disabled: No filtering is applied at all. All frames are received even
		  incomplete and defective frames. This mode should be used for debugging only.
		* Accept-All: All complete and error-free frames are received.
		* Match-Standard: Only standard frames with a matching identifier are received.
		* Match-Standard-and-Data: Only standard frames with matching identifier and
		  data bytes are received.
		* Match-Extended: Only extended frames with a matching identifier are received.
		
		The mask and filters are used as bit masks. Their usage depends on the mode:
		
		* Disabled: Mask and filters are ignored.
		* Accept-All: Mask and filters are ignored.
		* Match-Standard: Bit 0 to 10 (11 bits) of mask and filters are used to match
		  the 11-bit identifier of standard frames.
		* Match-Standard-and-Data: Bit 0 to 10 (11 bits) of mask and filters are used
		  to match the 11-bit identifier of standard frames. Bit 11 to 18 (8 bits) and
		  bit 19 to 26 (8 bits) of mask and filters are used to match the first and
		  second data byte (if present) of standard frames.
		* Match-Extended: Bit 0 to 10 (11 bits) of mask and filters are used
		  to match the standard 11-bit identifier part of extended frames. Bit 11 to 28
		  (18 bits) of mask and filters are used to match the extended 18-bit identifier
		  part of extended frames.
		
		The mask and filters are applied in this way: The mask is used to select the
		identifier and data bits that should be compared to the corresponding filter
		bits. All unselected bits are automatically accepted. All selected bits have
		to match one of the filters to be accepted. If all bits for the selected mode
		are accepted then the frame is accepted and is added to the read buffer.
		
		.. csv-table::
		 :header: "Mask Bit", "Filter Bit", "Identifier/Data Bit", "Result"
		 :widths: 10, 10, 10, 10
		
		 0, X, X, Accept
		 1, 0, 0, Accept
		 1, 0, 1, Reject
		 1, 1, 0, Reject
		 1, 1, 1, Accept
		
		For example, to receive standard frames with identifier 0x123 only the mode can
		be set to Match-Standard with 0x7FF as mask and 0x123 as filter 1 and filter 2.
		The mask of 0x7FF selects all 11 identifier bits for matching so that the
		identifier has to be exactly 0x123 to be accepted.
		
		To accept identifier 0x123 and identifier 0x456 at the same time, just set
		filter 2 to 0x456 and keep mask and filter 1 unchanged.
		
		The default mode is accept-all.
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_SET_READ_FILTER, [mode, mask, filter1, filter2], 'B I I I', '', returnCallback, errorCallback, false);
	};
	this.getReadFilter = function(returnCallback, errorCallback) {
		/*
		Returns the read filter as set by :func:`Set Read Filter`.
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_GET_READ_FILTER, [], '', 'B I I I', returnCallback, errorCallback, false);
	};
	this.getErrorLog = function(returnCallback, errorCallback) {
		/*
		Returns information about different kinds of errors.
		
		The write and read error levels indicate the current level of checksum,
		acknowledgement, form, bit and stuffing errors during CAN bus write and read
		operations.
		
		When the write error level extends 255 then the CAN transceiver gets disabled
		and no frames can be transmitted or received anymore. The CAN transceiver will
		automatically be activated again after the CAN bus is idle for a while.
		
		The write and read error levels are not available in read-only transceiver mode
		(see :func:`Set Configuration`) and are reset to 0 as a side effect of changing
		the configuration or the read filter.
		
		The write timeout, read register and buffer overflow counts represents the
		number of these errors:
		
		* A write timeout occurs if a frame could not be transmitted before the
		  configured write timeout expired (see :func:`Set Configuration`).
		* A read register overflow occurs if the read register of the CAN transceiver
		  still contains the last received frame when the next frame arrives. In this
		  case the newly arrived frame is lost. This happens if the CAN transceiver
		  receives more frames than the Bricklet can handle. Using the read filter
		  (see :func:`Set Read Filter`) can help to reduce the amount of received frames.
		  This count is not exact, but a lower bound, because the Bricklet might not
		  able detect all overflows if they occur in rapid succession.
		* A read buffer overflow occurs if the read buffer of the Bricklet is already
		  full when the next frame should be read from the read register of the CAN
		  transceiver. In this case the frame in the read register is lost. This
		  happens if the CAN transceiver receives more frames to be added to the read
		  buffer than are removed from the read buffer using the :func:`Read Frame`
		  function. Using the :cb:`Frame Read` callback ensures that the read buffer
		  can not overflow.
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_GET_ERROR_LOG, [], '', 'B B ? I I I', returnCallback, errorCallback, false);
	};
	this.getIdentity = function(returnCallback, errorCallback) {
		/*
		Returns the UID, the UID where the Bricklet is connected to,
		the position, the hardware and firmware version as well as the
		device identifier.
		
		The position can be 'a', 'b', 'c' or 'd'.
		
		The device identifier numbers can be found :ref:`here <device_identifier>`.
		|device_identifier_constant|
		*/
		this.ipcon.sendRequest(this, BrickletCAN.FUNCTION_GET_IDENTITY, [], '', 's8 s8 c B3 B3 H', returnCallback, errorCallback, false);
	};
}

module.exports = BrickletCAN;
